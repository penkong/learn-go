csv , sql , json (heavy)

now buffers 

it has syntax like 

message sdfdsf {
  int32 id = 1;
  string fsdfsdf = 2;
  bool fdsfsdf = 3;
}

.proto text file .

advantage : 
typed , 
data compressed 
schema is need 
document 
many langauge
schema can evolve 
100x faster xml




how use ?? 

.proto 
auto generation of code 
by your lang 
create objects 
then 
serialize , 
deserialize ,


big projects :
etcd , 
some dbs 


we use proto3 



=======================================
syntax proto3
message : is what we exchange in code
  field  we have type 
  field name 
  field tag.

---

scalar types :
float 32bits 
double 64 bits 
integer int32

boolean : bool 
string : utf-8 or 7bit ascii 

bytes : represent any sequence of data .
like image

for big always use _




tags : number at end 1 to 2^29
19000-19999 reserved


tags 1 to 15 use 1 byte space


tags 16 to 2047 use 2 byte

reserved tags



repeated fields : array or list  !== singular


comments : it is good practice , 



default value : always will be by proto. 



enum : if you know all the value , 
the first value is the default value .



you can make proto file with multi message (types) 


netsting types :


import 
import "address from root of project";


making packages


Find the correct protocol buffers version based on your Linux Distro: https://github.com/google/protobuf/releases

Example with x64:

# Make sure you grab the latest version
curl -OL https://github.com/google/protobuf/releases/download/v3.5.1/protoc-3.5.1-linux-x86_64.zip
# Unzip
unzip protoc-3.5.1-linux-x86_64.zip -d protoc3
# Move protoc to /usr/local/bin/
sudo mv protoc3/bin/* /usr/local/bin/
# Move protoc3/include to /usr/local/include/
sudo mv protoc3/include/* /usr/local/include/
# Optional: change owner
sudo chown [user] /usr/local/bin/protoc
sudo chown -R [user] /usr/local/include/google



on  folder of protos 
make folder for receive compiled code 
command
protoc -I=<name of proto folder> --js_out=OUT_DIR=python proto/*.proto



- Golang packages:

go get -u github.com/golang/protobuf/protoc-gen-go
go get -u github.com/golang/protobuf/proto



for go lang 

make src 
put proto file there

define name of package 

after that 
define 
option go_package = 'become name of go file'


make file generate.sh 
put commands there 

---

Protobuf Data Evolution :


without break application 

Forward compatible change :
write new data .proto ----> it go through internet ---> read data from old .proto



Backward compatible chnage :
write old data .proto ---> it go through internet ---> read data with new .proto




Forward + Backward = full compatibility .


for it work 
rules : 
1.dont change the numeric tags for any existing fields
2.can add new fields , old code just ignore 
3.if old / new code reads unknown daa , the default will take place .
4.field can remove if tag number not use again add prefix OBSOLETE_
5.for data type change read docs.


can change field name 


remove field but always reserve tag and name 
reserved 2 
reserved "first_name"
or 
OBSOLETE_field_name : not good way



reserve keyword 



defaults :
make sure default value does not have any meaning for your business.



enum evolve :
like before.








advanced :


use sint64 or 32 for storing negative values 
use a technique called zigzag


fixed32 or 64 use 4 or 8 bytes constantly , use for huge values









































