install go lang 
add extentsions for vscode 
install analyze tools 
gopkgs
  go-outline
  gotests
  gomodifytags
  impl
  goplay
  dlv
  golint
  gopls

---
go env 

main.go
how run code?
go in folder > go run main.go

go fmt > format files 
go build > compile 
go run > compile and execute
go install > compile and install a package
go get > dl source code of package (someone elese)
go test > run stest

--- 

what is 'package main'?

package == project == workspace

package (many go file in it  )
each file in workspace need have package name 
that belong to .

there are 2 type of packages
executable : generate a file we can run
(word main is important)

reusable : code use as helper, good place to put 
reuse logic
(package calculator)

---

what is import fmt ?
allow access to other code 

math, encoding , debug , fmt , crypto , io

golang.org/pkg

also can import other reuse packages

---

steps in go file :
package declaration
list of imports 
declaration of functions

---

CARDS PROJECT :
get file , read file , write to file , and functions

create new var with string ,
var card string = 'Ace of space'

string
bool
int 
float64

short form , 
card := "Ace of spades"

after	card = "Five of Diamonds"

--- 

return type of functions

func sth() string {}

---

array : fixed length

slice : an shrinkable array 
cards := []string{newCard(), newCard()}

only with one data type 

how add to slice?
with append 
it return new slice and attach it to var ,
append(<name of oldVar>, "info")

how iterate over slice ?
for i, card := range cards {
  fmt.Println(i, card)
}

---

OOP approach vs Go approach

type : tell go what we are going to do ,
receiver function : it is like method , 

define a file type how our functionality going to
work and treat .


and use that type in main file 
and run project like 

go run main.go deck.go

now func receiver 
func (d deck) print() {
	for i,card := range d {
		fmt.Println(i,card)
	}
}

now the any var defined with type of deck have 
access to print functions.

d is actual copy of the deck we are working with
available in the function a var called .

slice cards == d == like this , self 

type is like class declaration,
and funcs are methods .


add new functionality to understand go syntax


can pick slice from slice 
deck[startIndex:upToNotIncludingIndex]
deck[:2] // slice of 0,1
deck[2:] // slice of 6



receiver methods are like static methods 


noraml function get info


go has support to return multiple value from 
func
func deal(d deck, handSize int) (deck, deck) {
  	return d[:handSize], d[handSize:]
}

hand, remainingCards := deal(cards, 5)


---

byte slice : []byte

save to file ,
package ioutil


type conversion in go 
type we want    value we have
[]byte           ("hi there")

deck => []string => join => []byte
package Stings



null is nil

len == length 

Math.random = rand.Intn
go use seed for generator of random 

---

test with go 

go test go

func TestNewDeck(t *testing.T) {}
t is test handler

---

struct 
data structure . collection of props thatr are related together.
card struct => suit , value 
struct like plain object in js .


type person struct {
  firstName string
  lastName string
  contact contactInfo<cutom type>
}
alex := person{"Alex", "Anderson"}

in go when define var and dont assign anything to it 
go assign zero value by itself

string, int, float, bool

fmt.Printf(identifier, actual value)
"%+v" => % field names , v their values

also you can add struct as item for receiver func

but update value in struct normally does not work 

pointers in go 

go is pass by value

struct with pointers

jimPointer := &jim
(pointerToPerson *person)
*person is pointer

&variable : & is operator , give me the memory address of the value this variable
  is pointing to (give memory address)

&var = memory address


// read like this : a pointer that point to sth
*pointer : * give me the value this memory address is pointing to.
// take this memory address and give me the value

*point = value in that memory address.

(pointerToPerson *person)

*person means : type description , means we are working with pointer of type person

*pointerToPerson : an operator , means we want manipulate the value the pointer is refering to.


turn address into value with *address
turn value into address with &value


shortcut : go infer for us &var , we can only do *type and go take memory address and 
make it ready for pointer varpoiner = &var

//

gotchas :

struct vs slice 
struct change need pointer 
but slice not 
it is like object and normal val in js .

slice : go make 2 data structure , slice , and array
new slice container 3 part , pointer to head of array , capacity, length 

slice --> go --> new slice (pointer , capacity, length) --> array by go 

value tpyes in go : int , float, string , bool , struct 
(for change need pointers in a function)

reference type in go : slices , maps , channels , pointers ,  fucntions
(dont worry about pointers with this)

---

Map: 
all keys must be same type 
all value must be same type 

3 way to declare with make , with normal way , with init 
map[string]string


structs is better than map
we can not iterate over struct

when you know keys use struct
when dont know about things comming use map

---

interfaces :

if anything satisfy interface things 
it become automatically type of interface

interfaces are blueprint for struct
rules 

type sth interface {
  sths(list of argument) (list of return types)
}



concrete type : can produce value out of it like
map , string ,int , struct , cutstom struct


interface type 


------------------

HTTP :

normal http get dont bring back body of req

an interface can embed another interface

Body has type of interface 
that means Body can be anything as long as satisfy inteface


source of data --> Reader i --> []byte --> Writer i


-----------------------

channels and goroutines :

handling Concurrency

add go 


go scheduler : runs one routine until it finishes or makes
a blocking call .

one cpu: if it blocking pause goroutine and exec next goroutine

more cpu : scheduler runs one thread on each logical core

Concurrency : we can have multi threads exec code . if one blocking
another one is picked up

Parallelism : need more cpu than one , multi thread exec at 
same time 


Main routine is boss other goroutine are children

Channels : use to communicate between different Goroutines
we use channel to make sure main routine is aware of child
goroutine


channel must be typed 

c := make(chan string)
make create value out of given type 

channel is sending data mechanism it has listener and issuer

send data to channel : channel <- 5
reciever : reciever <- channel
fmt.Println(<- channel)

the line up is blocking code means we sit and wait to 
sth come into channel

receive message from channel is blocking 


now we want to make sth like status checker what??
means constantly request for example for link after it 
finish go request(link) -> finished ? -> go do it again 

for repeat :
for {
  go requester(<-c, c)
}

alternative syntax :

for l := range c {
  go requester(l, c)
}


Sleeping a routine :
use function literals = annonymous function in js
lambda in c# 

each routine must have access to his own list of vars 
in memory 


================================================================================

go2 
make workspace 
with 3 dir
bin pkg src


go get -d -x -v "address"


go fmt = format current dir
go fmt ./... = format everything


go install 
for exe : put in gopath/bin  , compile program

for package : put in gopath/pkg , compile package , make it archive file .

--- 

go modules :

go mod init : init new module 
go build , test 
go list -m all : print current module dependencies
go get <package name> : bring latest one  
go mod tidy : remove unused .



go mod init example/user/repo
make module out of your file 


if we import a dependency it auto add 
to mod as dependency and go.sum file will 
add also show dependency in dependency


go list -m -versions <package name>
go get <pacakge with @number>
go test  


-----

controll flow :

1 ) sequence 
2 ) loop 
3 ) conditional

read control flow wiki



every value is type of interface {}


identifiers name program entities .


var keyword work outside of func body also .
 
type and value 

// show type of var 
fmt.Printf("%T\n", var)


conversion no casting 
a = int(b)

------

...interface {} == "variadic parameter"
give the func as many as item from one type as you want 


every value in go is type of empty interface = interface{}

---------------------------------

bool type : true false 


how computer works??


int without decimal 
float with decimal = real numbers


byte in go is alias for unit8
character utf ascii == rune in go is alias for int32

check 
fmt.Println(runtime.GOOS)
fmt.Println(runtime.GOARCH)


nacl os 

----------


string :

a string value is sequence of bytes = slice of bytes

[]byte(stringYour)

[]byte = []uint8

// show utf code  
fmt.Println("%#U" , string[i])

-------------------

numerical :

abcdef
101112131415

binary 2^0 
"%b\n", n
hexa  16^0
"%x\n"
base64 64^0

---------------------
const sl = 'sl'
const ( a = 43 b = 'sfsd' c true)


-------------------------------

IOTA :

pre declare identifier 
automatically increment data 
const a = IOTA
const b = IOTA
const c = IOTA
const d = IOTA
1,2,3,4


------------------------------------

Bit shifting : 

"%d" : decimal 
"%b" : binary 
x := 4 
y := x << 1 ===> y = 8


kb = 1 << 10 (add 10 zero to 1)
kb =  1 << (iota * 10)



raw string literals ``

-------------------------------------------------

Control flow :

switch "value"{
  // this will exec
  case "value" :

  // multi case value
  case "value1" , "value3", "value4" :
  case :
    fmt.fdsfsd()
    // will exec all other valid case below
    fallthrough

  case : 
  default :
    sfdsfew()
}

-------------------------------------------

group data :

array : 
var x [5]int 


slices :
slice is agregate


agregate : value of same type
struct : value of different types


composite type - literals:
slice
x := type {values}
x := []int{3,4,5,6,7,8}



if looping over map slice or ... use range



slice , slice :
x := []int{3,4,5,6,7,8}
x[:3] x[3:]



append to slice :

append(x, 4,5,6)


append slice to slice :

variadic parameters : y...
append(x , y...)


delete from slice :
append(x[:2], x[4:]...)



slice make :

built in make 
make() specify size of underlying array of slice

make([]int , 10 length, 100 capacity)
len(x)
cap(x)
use append to add to this slice built with make()
when size come over it make new added array with length of cap(x)
cap(x) ==> 2* cap(x)


multi dimensial slice :

jb := []string{}
jd := []string{}

xp := [][]string{jb, jd}

---------------------


maps :
key value store

m := map[string]int{
  "james" : 32,
  "miss" : 27, 
}

check that exists
if v does not exist bring back 0 
we need to way to determine if it exist 
v, ok := m["sonny"]
 
// famous
if v, ok := m["sonny"]; ok {

}



add to map :


m["tod"] = 343

for k, v := range x {
  fmt.Println(k,v)
}



map delete :

delete(mapName , "key")



another map :
m := map[string][]string{
  "mk" : []string{ "", ""}
}

-----------------------------


struct :
a data structure that let us compose values of different types

type person struct {
  first string
  last string
  age int
}

p1 := person {
  first: 'fsdf"
  last : 'fsdfs'
}
created value of type person

annonymous struct :

struct{firstName string}{ firstName: "mfsdf"}


------------------

functions :


reciever : attached to type 

 


variadic parameters : 

// many values become slice 
func foo (x ...int) {}


unferling a slice :
m = []int{}
m... => pull values of slice and put it in new location we use 

---

defer :
defer execution of function until define by us

defer foo()
bar()

----

Methods :

type person struct {}

func (p person) speak() {}


attach functio to that type.


-----------------------------------------

interfaces & polymorphism :

interfaces allow us to define behavior .
also do polymorphism with that 


type human interface {
  speak()
}

a value can be more than one type , type human , type person

any type that have speak() is type of human

assertion :
if h is type of person
h.(person).first
h.(agent).letToKill

------------------------------

annonymous func :

func main () {
  func(x int) {

  }(43)
}


---------------------------

func expresson :

f := func() {

}

f()

-----------------------------

return func from func :

funct foo() func() int {
  return func() int {
    return 451
  }
}

------------------------------

callback : 

passing func as argument


func even(f func(xi ...int) int , vi ...int) int {
  do sth with vi
  return f(vi)
}

-----------------------------

closure :
when closing var in its scope 

-----------------------------

recursion :

not good idea .

a function call itself .


-------------------------------------


Pointers :

& : show address in memory 
pointer in memory 

when check somthing T with & it show 
us type of pointer *int or *string

what is stored on that & > pointer with *int value 



*somevar : de reference pointer and show value stored in that
address.

b = *&b

also it let u assign new value to that 
a = 'old value'
b := &a
*b = 'new value'


use to pass address pointer rather than data 
or if you want change something in locations.


when value want to mutate use pointer.


---------------

method set :

those methods attached to a type named set 

what is set of methods attached to type => method set 

non pointer reciever
pointer reciever



-------------------


Application :

marshaling :

json.Marshall
struct -> json 

de marshaling :

string is sequence of bytes

jsonBlob = []byte
json  -> struct 

json.Unmarshal(blob , &var = must be pointer)
json ->  conversion to []byte -> Unmarshal



------------

Writer interface :

encode , decode (like marshal)
Reader , Writer

writer : write it to out source 
reader : incoming info

type writer is interface ,
with 
Write(p []byte) (n int , err error)

-----------------------

Sort :

slice -> sort


sort.Ints(slice of int)
sort.Strings()

slice is type length capacity
 

sort cutstom :
 

Interface inteface :
3 method on it 
len swap less


-----------------------

bycrypt : 

from crypto 


------------------------


Concurrency :


Concurrency vs Parallelism 

Parallelism is code run in one time 

Concurrency is a design pattern

runtime :

NumCPU()
NumGorouteins()
A Goroutine is a function or method which executes independently and 
simultaneously in connection with any other Goroutines present in your program.

make new goroutine with go f()
it add one to goroutine 
but we need to tell to main() wait because when go pass go f() it exec whole main 
and program exit but we need wait go f() resolve

WaitGroup : package sync
// pacakge scope 
var wg sync.WaitGroup
wg. add dont wait 3 methods 
add wg.add()
add wg.done() to f()

and in end of main write wg.wait()


check effective go Concurrency


--------------------------

Race condition :

normally when use go f() it happen 
we use runtime.Goshcedule() to let it continue

go run -race main.go


to fix it we use mutex

locking the access to variable 

var mu sync.Mutex

and in logic we put 

mu.lock()
logic here
nobody can access counter var
mu.Unlock()

-------------------------------

Atomic 

from pacakge sync

addInt^4

when in go you see int64 --> almost atomic



----------------------------------------

Channels :
better way to sync your code .

c := make(chan int)

c <- 42 (nothing pull it off)
fmt.Println(<-c)

Channels block .
if send and receive does not happen at same time.
in normal channel must be like this.

Successful buffer :
it can be buffer channel also 
it means certain value can sit in channel and does not 
mather it pull it off or not

c := make(chan int, 1 = allow one value to sit there)



unsuccessful buffer :
when we make it with 2 buffer but add 3 item to channel 


Directional Channels :

last ones was bio Directional channels 
also we can one way channel 

// channels only send values on it
// send
c := make(chan <- int , 2)

// channel only receive
// recevie
c := make(<- chan int , 2)

 
-------

using channels :

// bio channel
c := make(chan int)

// in scope of this function it is only sender channel 
func fooSend(c chan<- int) {}

// in scope of this fucntion it is only receiver
func barReceive(c chan int) {}




Rangeing over channel :

for i:= 0 ; i <100 ; i++ {
		c <- i
	}
	close(c)


for v := range c {
		fmt.Println(v)
	}

after range loop with channel close it
also range block until channel close 
-------

Select Pattern :

use to pull value of from many channels


select {
		case v := <-e:
			fmt.Println("eve", v)
		case v := <-o:
			fmt.Println("odd", v)
    // just comma idiom 
		case i, ok := <-q:
			fmt.Println("quit", v)
			return
		}


go func(){
  c <- 434
  close(c)
}()
v , ok := <-c
434, true 
v , ok := <-c 
0 , false


----------------------------


fan in pattern :
for Concurrency design pattern

i have many works let me fan in as many as possible goroutine
the all will be working on that as much as possible

when they get back result fan out those to channel

fan in : send(even, odd) receive(even,odd, fanin)

do middleware stuff in fan in and channel ????

chan1
chan2  ===> fan in
chan3

---

fan out pattern :

take piece of work and need it done over and over 
like video change format and ...
encoding video 
1000 vidoes 
for each video need to encoded launch a goroutine
take result and bring back.

do somethin in chan1 
with wait group
fanOut range info from chan1 to chan2
we take range value put it in logic(make 100 goroutine here think) 
function (encoding like)
and put produced info to chan2


-------------------------------------

Context :

is tool u use with Concurrency design pattern
to make sure that if you have process that launch some
goroutine -> when you canecel process make sure all of other
goroutine canceled.

prevent goroutine leaking .

to go blog .
 
---------------------------------------------------


Errors :

log.Println(err)

log.SetOutput(file)

log.Fattalln(err) == Println() + os.Exit()

log.panic()

recover()

panic()

-----------------

recover :

only works with defer .
 


add info to err :
errors.New()
fmt.Errorf()

------------------------

Documentation :

godoc pacakge 
extract and generate Documentation for us.

go doc command

go doc help 
go help doc

go doc -cmd cmd/doc

go doc name of pacakge
go doc package.method



godoc :
with this you can run local server and see all your Documentation
godoc -http=:8080


godoc -src fmt Printf == show source of code .

to make your doc code accessible for other 
copy paste address of github in go doc 


provide  comments in your code it will become Documentation 


make doc.go file to make Documentation description
print.go
scan.go
format.go```

// -------------------------------------------------------------------

A package is a collection of source files in the same directory that are compiled together. 

A repository contains one or more modules. A module is a collection 
of related Go packages that are released together.

go.mod declares the module path


// go mod init github.com/penkong/nextTry
// go install github.com/penkong/nextTry
// $HOME/go/bin/nextTry

set the default value :
go env -w GOBIN=/somewhere/else/bin

to unset :
go env -u GOBIN

when you have pacakge build it 
it go to cache 

then import pacakge to your module 

do go install 
and now it bocome command

To remove all downloaded modules, you can pass the -modcache flag to go clean: 
go clean -modcache


go test command and the testing package. 
You write a test by creating a file with a name ending in _test.go


func TestNameOfTest(t *testing.T) {
}

go test





GOOS=linux GOARCH=amd64 go build -o <name you want>




Read Docker file reference on docker site .  








